# Voice AI: Voice Control Assistant

## Overview
Next.js app with voice commands via WebRTC + OpenAI. Includes JS SDK for website integration.

## Structure
- `app/` - Next.js App Router code
  - `page.tsx` - Web app entry point
  - `layout.tsx` - Root layout
  - `globals.css` - Global styles
  - `favicon.ico` - Favicon
  - `api/` - Backend endpoints
    - `session/` - Session mgmt
    - `v1/` - SDK API endpoints
      - `auth/validate/` - Client validation
      - `sessions/` - Session management
      - `voice/` - Voice endpoints (process/, text-log/)
- `analysis/` - Data analysis tools
  - `README.md` - Analysis docs
  - `requirements.txt` - Python deps
  - `notebooks/` - Jupyter notebooks
    - `supabase_example.py` - Supabase connection example
  - `data/` - Analysis data files (ONLY store data here, not in root)
    - `.forgit` suffix files (e.g., `example.forgit.csv`) → committed to Git
    - All other files → ignored by Git
  - `scripts/` - Python analysis scripts
- `lib/` - Utility libraries
  - `storage/` - Storage utils
  - `supabase.ts` - Supabase client
  - `security.ts` - Client validation
  - `openai-webrtc.ts` - WebRTC+OpenAI integration
  - `openai-sessions.ts` - OpenAI session mgmt
  - `sessions.ts` - Session management
  - `logger.ts` - Logging utilities
- `prompts/` - OpenAI prompt templates
  - `agent-instructions.ts` - Voice assistant instructions
- `public/` - Static assets
  - Icons: `microphone.svg`, `file.svg`, `globe.svg`, `next.svg`, `vercel.svg`, `window.svg`
  - `sdk/` - Voice AI SDK files (`demo.html`, `voice-ai-sdk.js`, `voice-ai-sdk.min.js`, `voice-ai-styles.css`)
- `scripts/` - Utility scripts
  - `simple-supabase-setup.sql` - Supabase setup SQL
  - `deploy-sdk.sh` - SDK deployment script
- `tests/` - Test files
- `dist/` - Build output (gitignored)
  - `sdk/` - Compiled SDK
- `middleware.ts` - Next.js middleware
- `.env.local` - Environment vars (not committed)
  - `NEXT_PUBLIC_OPENAI_API_KEY` - OpenAI API key
  - `ALLOWED_CLIENTS` - Authorized clients
  - `CLIENT_*_DOMAINS` - Allowed domains
- `.env.local.example` - Example env vars
- Config files: `next.config.ts`, `package.json`, `postcss.config.mjs`, `tailwind.config.ts`, `tsconfig.json`
- Docs: `INTEGRATION.md` (SDK guide), `README.md` (Project docs)

## Flow
1. `page.tsx` renders main app
2. OpenAI WebRTC integration (`lib/openai-webrtc.ts`)
3. Voice processing via prompts (`prompts/agent-instructions.ts`)
4. Voice assistant responds
5. SDK enables website integration

## Setup
1. Create `.env.local` from `.env.local.example` - **REQUIRED FIRST**
   - Copy `.env.local.example` to `.env.local`
   - Add your API keys/secrets
   - **Must do this** before using ANY functionality
   - Required for both web app AND analysis tools
2. Add OpenAI API key and client config
3. Set up Supabase via SQL in `scripts/simple-supabase-setup.sql`
4. Run `npm run dev`
5. Open http://localhost:3000

## Python Analysis Setup
1. Add Python deps to `analysis/requirements.txt` only (not global install)
2. Create venv in analysis dir:
   ```bash
   cd analysis
   python -m venv .venv
   source .venv/bin/activate  # Unix/macOS
   # or
   .venv\Scripts\activate     # Windows
   ```
3. Install deps: `pip install -r requirements.txt`
4. For new deps: update `requirements.txt`, then reinstall
5. Access env vars from root `.env.local`:
   ```python
   from env_loader import get_env_var
   openai_api_key = get_env_var("NEXT_PUBLIC_OPENAI_API_KEY")
   ```
   **IMPORTANT**: Requires `.env.local` setup as described above
6. Jupyter notebooks: `.py` files with `# %%` cell markers
   - Compatible with VS Code Jupyter extension
   - Better version control/diff viewing
   - Run via VS Code "Run Cell" or convert to `.ipynb`
7. Data files:
   - Store ONLY in `analysis/data/` dir
   - NEVER in root dir
   - All `analysis/data/` files Git-ignored by default
   - Add `.forgit` suffix to commit to Git (e.g., `important_data.forgit.csv`) 
8. Supabase connection:
   - See `analysis/notebooks/supabase_example.py` for example
   - Shows Supabase connection + `text_logs` table data retrieval
   - Create your own notebooks for custom analysis
   - Example loads first 30 records from `text_logs`, sorted by creation date 