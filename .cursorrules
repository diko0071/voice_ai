# Voice AI: Voice Control Assistant

## Overview
Next.js app with voice commands via WebRTC and OpenAI. Includes JavaScript SDK for website integration.

## Structure
- `app/` - Next.js App Router code
  - `page.tsx` - Entry point for the web application
  - `layout.tsx` - Root layout
  - `globals.css` - Global styles
  - `favicon.ico` - Favicon
  - `api/` - Backend endpoints
    - `session/` - Session management
    - `v1/` - API endpoints for SDK
      - `auth/` - Authentication endpoints
        - `validate/` - Client validation
      - `sessions/` - Session management
      - `voice/` - Voice processing endpoints
        - `process/` - Voice processing
        - `text-log/` - Text logging
- `lib/` - Utility libraries
  - `storage/` - Storage utilities
  - `supabase.ts` - Supabase client
  - `security.ts` - Client validation
  - `openai-webrtc.ts` - WebRTC integration with OpenAI
  - `openai-sessions.ts` - OpenAI session management
  - `sessions.ts` - Session management
  - `logger.ts` - Logging utilities
- `prompts/` - OpenAI prompt templates
  - `agent-instructions.ts` - Instructions for the voice assistant
- `public/` - Static assets
  - `microphone.svg` - Microphone icon
  - `file.svg`, `globe.svg`, `next.svg`, `vercel.svg`, `window.svg` - UI icons
  - `sdk/` - Voice AI SDK files
    - `demo.html` - SDK demo page
    - `voice-ai-sdk.js` - Main SDK
    - `voice-ai-sdk.min.js` - Minified SDK
    - `voice-ai-styles.css` - SDK styles
- `scripts/` - Utility scripts
  - `simple-supabase-setup.sql` - Supabase setup script (required SQL setup for tables and permissions)
  - `deploy-sdk.sh` - SDK deployment script
- `data/` - Data files
  - `text/` - Text data
- `tests/` - Test files
- `dist/` - Distribution files (in gitignore, but shown for reference)
  - `sdk/` - Compiled SDK files
- `middleware.ts` - Next.js middleware
- `.env.local` - Environment variables (not committed)
  - `NEXT_PUBLIC_OPENAI_API_KEY` - OpenAI API key
  - `ALLOWED_CLIENTS` - Authorized clients
  - `CLIENT_*_DOMAINS` - Allowed domains
- `.env.local.example` - Example environment variables
- `next.config.ts` - Next.js config
- `package.json` - Dependencies
- `postcss.config.mjs` - PostCSS configuration
- `tailwind.config.ts` - Styling config
- `tsconfig.json` - TypeScript config
- `INTEGRATION.md` - SDK integration guide
- `README.md` - Project documentation

## Flow
1. `page.tsx` renders the main application
2. OpenAI WebRTC integration via `lib/openai-webrtc.ts`
3. Voice processing using prompts from `prompts/agent-instructions.ts`
4. Voice assistant responds to user
5. SDK enables integration on any website

## Setup
1. Create `.env.local` from example
2. Add OpenAI API key and client configuration
3. Run `npm run dev`
4. Open http://localhost:3000 